[[lisk-core-from-source-setup]]
Lisk Core from Source Setup
---------------------------

* link:#pre-install[Pre-Installation]

1.  link:#open-necessary-ports[Open necessary ports]
2.  link:#create-a-new-user[Create a new user]
3.  link:#tool-chain-components[Install Tool chain components]
4.  link:#git[Git]
5.  link:#nodejs[Node.js]
* link:#node-version-manager[Node version manager]
6.  link:#postgresql-version-10[Postgres]
7.  link:#installing-redis[Redis]

* link:#installation[Installation]

1.  link:#login-as-the-lisk-user[Login as the Lisk user]
2.  link:#installing-lisk-from-source[Installing Lisk from Source]

* link:#post-installation-optional[Post-installation (optional)]
* link:#logrotate-setup[Logrotate Setup]

[[pre-install]]
Pre-Install
~~~~~~~~~~~

This document details the prerequisites to install Lisk Core 1.0.0 from
a Source installation using tagged releases on Github. To complete the
installation, some prerequisites need to be fulfilled. If you have
already performed these, please proceed to the
link:#installation[Installation] chapter.

Firstly, please determine if your platform can install Lisk Core from
source.

[[supported-platforms]]
Supported Platforms

* Ubuntu 14.04 (LTS) x86_64
* Ubuntu 16.04 (LTS) x86_64
* Ubuntu 18.04 (LTS) x86_64
* MacOS 10.12 (Sierra)
* MacOS 10.13 (High Sierra)

[[open-necessary-ports]]
Open necessary ports
^^^^^^^^^^^^^^^^^^^^

To connect to the desired network with Lisk Core, please ensure that the
corresponding ports are open:

[cols=",,",options="header",]
|====================================
|Network |httpPort(HTTP) |wsPort(TCP)
|Mainnet |8000 |8001
|Testnet |7000 |7001
|Betanet |5000 |5001
|Devnet |4000 |5000
|====================================

These are the default ports for connecting with the network, they can be
altered later in `config.json`.

[[create-a-new-user]]
Create a new user
^^^^^^^^^^^^^^^^^

To install the required prerequisites, it is necessary to have a user
with sudo rights on the server. To run and manage a Lisk Core node in
the future, please create a separate 'Lisk' user like so:

[[ubuntu]]
Ubuntu
++++++

__________________________________________________________________________
The `lisk` user itself *does not need* any `sudo` rights to run Lisk
Core.
__________________________________________________________________________

[source,bash]
----
sudo adduser lisk
----

[[toolchain-components]]
Toolchain components
^^^^^^^^^^^^^^^^^^^^

Used for compiling dependencies.

[[ubuntu-1]]
Ubuntu
++++++

[source,bash]
----
sudo apt-get update
sudo apt-get install -y python build-essential curl automake autoconf libtool ntp
----

[[macos]]
MacOS
+++++

Ensure that both https://developer.apple.com/xcode/[XCode] and
https://brew.sh/[Homebrew] are installed.

Update homebrew and install dependencies:

[source,bash]
----
brew update
brew doctor
brew install curl automake autoconf libtool
----

[[git]]
Git
^^^

https://github.com/git/git[Git] is used for cloning and updating Lisk.

[[ubuntu-2]]
Ubuntu
++++++

[source,bash]
----
sudo apt-get install -y git
----

[[macos-1]]
MacOS
+++++

[source,bash]
----
brew install git
----

[[node.js]]
Node.js
^^^^^^^

https://nodejs.org/[Node.js] serves as the underlying engine for code
execution.

Install system-wide via a package manager, like so:

[[ubuntu-3]]
Ubuntu
++++++

[source,bash]
----
curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
sudo apt-get install -y nodejs
----

[[macos-2]]
MacOS
+++++

[source,bash]
----
brew install node@10.14.1
----

[[node-version-manager]]
Node version manager
^^^^^^^^^^^^^^^^^^^^

We recommend using a Node version manager such as
https://github.com/creationix/nvm[NVM]. NVM is a bash script that
enables you to manage multiple active Node.js versions.

1.  Login as lisk user, that has been created in the first step:
+
[source,bash]
----
su - lisk
----
2.  Install nvm following these
https://github.com/creationix/nvm#installation[instructions]
3.  Install the correct version of Node.js using nvm:
+
[source,bash]
----
nvm install 10.14.1
----

For the following steps, log out from the 'lisk' user again with
`CTRL+D`, and continue with your user with sudo rights.

[[postgresql-version-10]]
PostgreSQL (version 10)
^^^^^^^^^^^^^^^^^^^^^^^

[[ubuntu-4]]
Ubuntu
++++++

Firstly, install postgreSQL on your machine:

[source,bash]
----
sudo apt-get purge -y postgres* # remove all already installed postgres versions
sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
sudo apt install wget ca-certificates
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
sudo apt update
sudo apt install postgresql-10
----

After installation, you should see the Postgres database cluster, by
running

[source,bash]
----
  pg_lsclusters
----

Drop the existing database cluster, and replace it with a cluster with
the locale `en_US.UTF-8`:

[source,bash]
----
  sudo pg_dropcluster --stop 10 main
  sudo pg_createcluster --locale en_US.UTF-8 --start 10 main
----

Create a new database user called `lisk` and grant it rights to create
databases:

[source,bash]
----
  sudo -u postgres createuser --createdb lisk
----

Switch to the lisk user and create the databases, where `{network}` is
the network you want to connect your Lisk Core node to:
`bash   su - lisk   createdb lisk_{network}`

For the following steps, log out from the lisk user again with `CTRL+D`,
and continue with your user with sudo rights. Change `'password'` to a
secure password of your choice.
`bash   sudo -u postgres psql -d lisk_{network} -c "alter user lisk with password 'password';"`

[[macos-3]]
MacOS
+++++

[source,bash]
----
brew install postgresql@10
initdb /usr/local/var/postgres -E utf8 --locale=en_US.UTF-8
brew services start postgresql@10
createdb lisk_{network}
----

`{network}` is the network you want to connect your Lisk Core node to.

[[installing-redis]]
Installing Redis
^^^^^^^^^^^^^^^^

[[ubuntu-5]]
Ubuntu
++++++

[source,bash]
----
sudo apt-get install redis-server
----

Start Redis:

[source,bash]
----
sudo service redis-server start
----

Stop Redis:

[source,bash]
----
sudo service redis-server stop
----

[[macos-4]]
MacOS
+++++

[source,bash]
----
brew install redis
----

Start Redis:

[source,bash]
----
brew services start redis
----

Stop Redis:

[source,bash]
----
brew services stop redis
----

______________________________________________________________________________________________________________________________________________________________
Lisk does not run on the redis default port of `6379`. Instead it is
configured to run on port: `6380`. Due to this, to run Lisk, you have
one of two options:
______________________________________________________________________________________________________________________________________________________________

1.  *Change the Lisk configuration*

In the next installation phase, remember to update the Redis port
configuration in both `config.json` and `test/data/config.json`.

1.  *Change the Redis launch configuration*

Update the launch configuration file on your system. Note that there are
many ways to do this.

The following is one example:

1.  Stop redis-server
2.  Edit the file `redis.conf` and change: `port 6379` to `port 6380`

* Ubuntu/Debian: `/etc/redis/redis.conf`
* MacOS: `/usr/local/etc/redis.conf`

1.  Start redis-server

Now confirm that redis is running on `port 6380`:

[source,bash]
----
redis-cli -p 6380
ping
----

And you should get the result `PONG`.

If you have finished all the above steps successfully, your system is
ready for installation of Lisk Core.

[[installation]]
Installation
~~~~~~~~~~~~

This section details how to install Lisk Core from Source. When
completed, you will have a functioning node on the Lisk Network. If you
are looking to upgrade your current Lisk Core installation, please see
link:../upgrade/source.md[Upgrade from Source].

[[login-as-the-lisk-user]]
Login as the Lisk user
^^^^^^^^^^^^^^^^^^^^^^

This user was created in the link:#pre-install[Prerequisites]. If you
are already logged in to this user, please skip this step.

[source,bash]
----
su - lisk
----

[[installing-lisk-from-source]]
Installing Lisk from Source
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Before proceeding, determine whether you wish to connect your node to
the Mainnet (Main Network) or Testnet (Test Network).

[source,bash]
----
git clone git@github.com:LiskHQ/lisk-sdk.git
cd lisk
git checkout v1.1.0 -b v1.1.0 # check out the latest release tag
npm ci
----

______________________________________________________________________________
Please check for latest release on
https://github.com/LiskHQ/lisk-sdk/releases
______________________________________________________________________________

To test that Lisk Core is built and configured correctly, issue the
following command to connect to the network:

[source,bash]
----
npm start # default: connect to Devnet
LISK_NETWORK=[network] npm start # Use environment variables to overwrite config values (recommended)
npm start -- --network [network]  # Use flags to overwrite config values
----

Where `[network]` might be either `devnet` (default), `alphanet`,
`betanet`, `testnet` or `mainnet`.

It is recommended to overwrite the config values with environment
variables if needed. Useable variables will always start with `LISK_`
prefix. Alternatively, the user may define a custom `config.json`, like
described in link:../configuration.md[Configuarion of Lisk Core] Click
here, to see a
link:../administration/source.md#command-line-options[list of available
environment variables]

If the process is running correctly, no errors are thrown in the logs.
By default, errors will be logged in `logs/[network]/lisk.log`. Once the
process is verified as running correctly, `CTRL+C` and start the process
with `pm2`. This will fork the process into the background and
automatically recover the process if it fails.

[source,bash]
----
npx pm2 start --name lisk src/index.js -- --network [network]
----

Where `[network]` might be either `devnet` (default), `alphanet`,
`betanet`, `testnet` or `mainnet`.

For details on how to manage or stop your Lisk node, please have a look
in link:../administration/source.md[Administration from Source].

If you are not running Lisk locally, you will need to follow the
link:../configuration.md#api-access-control[Configuration - API]
document to enable access.

That's it! You are ready to move on to the
link:../configuration.md[configuration] documentation if you wish to
enable forging or SSL.

[[post-installation-optional]]
Post-installation (optional)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[[logrotate-setup]]
Logrotate Setup
^^^^^^^^^^^^^^^

It is recommended to setup a log rotation for the logfile of Lisk Core.

[[ubuntu-6]]
Ubuntu
++++++

Ubuntu systems provide a service called `logrotate` for this purpose.
Please ensure Logrotate is installed on your system:

[source,bash]
----
logrotate --version
----

Next, go to the logrotate config directory and create a new logrotate
file for Lisk Core:

[source,bash]
----
cd /etc/logrotate.d
touch lisk
----

Inside this file, define the parameters for the log rotation.

Example values:

[source,bash]
----
/path/to/lisk/logs/mainnet/*.log { 
        daily                   # daily rotation
        rotate 5                # keep the 5 most recent logs
        maxage 14               # remove logs that are older than 14 days
        compress                # compress old log files
        delaycompress           # compress the data, after it has been moved
        missingok               # if no logfile is present, ignore
        notifempty              # do not rotate empty log files
}
----

After customizing the config to fit your needs and saving it, you can
test it by doing a dry run:

[source,bash]
----
sudo logrotate /etc/logrotate.conf --debug
----
