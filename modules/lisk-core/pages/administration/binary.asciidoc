[[lisk-core-binary-administration]]
Lisk Core Binary Administration
-------------------------------

This section details how to work with a Binary installation of Lisk
Core. For further details, see each commands reference below.

[[table-of-contents]]
Table of contents
~~~~~~~~~~~~~~~~~

* link:#basic-commands[Basic commands]
* link:#status[Status of Lisk Core]
* link:#start[Start Lisk Core]
* link:#stop[Stop Lisk Core]
* link:#reload[Reload Lisk Core]
* link:#reset--coldstart[Reset Lisk Core]
* link:#logs[Show logs]
* link:#help[Show Help]
* link:#management-tools[Management tools]
* link:#update-path-environment-variable[Update PATH environment
variable]
* link:#pm2[pm2]
* link:#psql[psql]
* link:#utility-scripts[Utility scripts]
* link:#generate-config[Generate Config]
* link:#update-config[Update Config]
* link:#advanced-commands[Advanced commands]
* link:#create-snapshot[Create Snapshot]
* link:#rebuild-from-snapshot[Rebuild from Snapshot]
* link:#start-node-only[Start Lisk Core process only]
* link:#stop-node-only[Stop Lisk Core process only]
* link:#start-database-only[Start database only]
* link:#stop-database-only[Stop database only]

[[basic-commands]]
Basic Commands
~~~~~~~~~~~~~~

Listed below are the available basic commands which can be used to
manage your Lisk node.

[[status]]
Status
^^^^^^

Check the status of the Lisk Core Node.

[source,bash]
----
bash lisk.sh status
----

[[start]]
Start
^^^^^

Start Lisk Core and PostgreSQL.

[source,bash]
----
bash lisk.sh start
----

[[stop]]
Stop
^^^^

Stop Lisk Core and PostgreSQL.

[source,bash]
----
bash lisk.sh stop
----

[[reload]]
Reload
^^^^^^

Reload Lisk Core and pick up changes to config.json.

[source,bash]
----
bash lisk.sh reload
----

[[reset-coldstart]]
Reset / Coldstart
^^^^^^^^^^^^^^^^^

Initializes the PostgreSQL database and starts Lisk Core.

[source,bash]
----
bash lisk.sh coldstart
----

[[logs]]
Logs
^^^^

Monitor(tail) the log file of Lisk.

[source,bash]
----
bash lisk.sh logs
----

[[help]]
Help
^^^^

Display all available commands.

[source,bash]
----
bash lisk.sh help
----

[[management-tools]]
Management Tools
~~~~~~~~~~~~~~~~

[[update-path-environment-variable]]
Update PATH environment variable
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you have installed Lisk Core with the Binary package and want to use
additional tools like `pm2` and `psql`, the corresponding PATH variables
need to be set by typing the following:

[source,bash]
----
source env.sh
----

[[pm2]]
pm2
^^^

PM2 comes bundled with the Lisk Core Binary distribution and will be
available after link:#update-path-environment-variable[Updating the PATH
environment]. For more information, how to manage your Node with PM2, go
to the link:administration/source.md[Source Administration] page.

[[psql]]
psql
^^^^

The interactive terminal for postgreSQL comes bundled with the Lisk Core
Binary distribution and will be available after
link:#update-path-environment-variable[Updating the PATH environment].
For more information about available commands, see the official
https://www.postgresql.org/docs/9.6/static/app-psql.html[PostgreSQL
Documentation]

[[utility-scripts]]
Utility scripts
~~~~~~~~~~~~~~~

There are a couple of command line scripts that facilitate users of lisk
to perform handy operations.

All scripts are located under `./scripts/` directory and can be executed
directly by `node scripts/<file_name>`.

[[generate-config]]
Generate Config
^^^^^^^^^^^^^^^

This script will help you to generate a unified version of the
configuration file for any network. Here is the usage of the script:

[source,bash]
----
Usage: node scripts/generate_config.js [options]

Options:

-h, --help               output usage information
-V, --version            output the version number
-c, --config [config]    custom config file
-n, --network [network]  specify the network or use LISK_NETWORK
----

Argument `network` is required and can by `devnet`, `testnet`, `mainnet`
or any other network folder available under `./config` directory.

[[update-config]]
Update Config
^^^^^^^^^^^^^

This script keeps track of all changes introduced in Lisk over time in
different versions. If you have one config file in any of specific
version and you want to make it compatible with other versions of the
Lisk, this scripts will do it for you.

[source,bash]
----
Usage: node scripts/update_config.js [options] <input_file> <from_version> [to_version]

Options:

-h, --help               output usage information
-V, --version            output the version number
-n, --network [network]  specify the network or use LISK_NETWORK
-o, --output [output]    output file path
----

As you can see from the usage guide, `input_file` and`from_version` are
required. If you skip `to_version` argument changes in config.json will
be applied up to the latest version of Lisk Core. If you do not specify
`--output` path the final config.json will be printed to stdout. If you
do not specify `--network` argument you will have to load it from
`LISK_NETWORK` env variable.

[[advanced-commands]]
Advanced Commands
~~~~~~~~~~~~~~~~~

Listed below are the available advanced commands which can be used to
manage your Lisk node. For more detail, see each commands reference
below.

[[create-snapshot]]
Create Snapshot
^^^^^^^^^^^^^^^

The snapshot script is used to take a backup of the whole blockchain. A
snapshot can be used to speed up the sync process, instead of having to
validate all transactions starting from block height 0 to current block
height. Lisk provides official snapshots of the blockchain, see
http://snapshots.lisk.io.

In case you want to create your own, just run the following script. It
will: 1. create a full database dump of the Lisk Blockchain 2. validate
the correctness of the blockchain, and 3. compress the result and save
it

_____________________________________________________________________________________
Note, that this process may take a long time, depending on the size of
your snapshot.
_____________________________________________________________________________________

[source,bash]
----
bash lisk_snapshot.sh
----

[[rebuild-from-snapshot]]
Rebuild from Snapshot
^^^^^^^^^^^^^^^^^^^^^

To replace the blockchain with a new snapshot from the Lisk Foundation

[source,bash]
----
bash lisk.sh rebuild
----

[[rebuild-from-a-local-snapshot]]
Rebuild from a local snapshot
+++++++++++++++++++++++++++++

[source,bash]
----
bash lisk.sh rebuild -f blockchain.db.gz
----

[[rebuild-form-a-remote-hosts-snapshot]]
Rebuild form a remote hosts snapshot
++++++++++++++++++++++++++++++++++++

If the file is named `blockchain.db.gz`, use this command

[source,bash]
----
bash lisk.sh rebuild -u https://hostname/
----

To use a remote host snapshot with a different name issue this command
instead

[source,bash]
----
bash lisk.sh rebuild -u https://hostname/ -f filename.db.gz
----

[[rebuild-from-the-genesis-block]]
Rebuild from the genesis block
++++++++++++++++++++++++++++++

[source,bash]
----
bash lisk.sh rebuild -0
----

[[start-node-only]]
Start node only
^^^^^^^^^^^^^^^

This command is used to start individual Node.JS processes apart from
the database. It is designed to be used with customized config.json
files to manage vertically stacked Lisk processes on one node.

[source,bash]
----
bash lisk.sh start_node -c <config.json>
----

[[stop-node-only]]
Stop node only
^^^^^^^^^^^^^^

This command is used to stop individual Node.JS processes apart from the
database. It is designed to be used with customized `config.json` files
to manage vertically stacked Lisk processes on one node.

[source,bash]
----
bash lisk.sh stop_node -c <config.json>
----

[[start-database]]
Start database
^^^^^^^^^^^^^^

This command is used to start database instances apart from the Lisk
process. It is designed to be used with customized `config.json` files
to target specific instances.

[source,bash]
----
bash lisk.sh start_db -c <config.json>
----

[[stop-database-only]]
Stop database only
^^^^^^^^^^^^^^^^^^

This command is used to stop all database instances apart from the Lisk
process.

[source,bash]
----
bash lisk.sh stop_db
----
