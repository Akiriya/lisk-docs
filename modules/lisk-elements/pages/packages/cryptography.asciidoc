[[lisk-elements-cryptography]]
Lisk Elements Cryptography
--------------------------

The Lisk Elements cryptography module provides all the cryptographic
functionality necessary when interacting with the Lisk ecosystem.

* link:#installation[Installation]
* link:#upgrade[Upgrade]
* link:#usage[Usage]
* link:#constants[Constants]
* link:#methods-for-converting-between-formats[Methods for converting
between formats]
* link:#buffertohex[bufferToHex]
* link:#getAddressFromPublicKey[getAddressFromPublicKey]
* link:#hextobuffer[HexToBuffer]
* link:#parseEncryptedPassphrase[parseEncryptedPassphrase]
* link:#stringifyEncryptedPassphrase[stringifyEncryptedPassphrase]
* link:#methods-for-encrypting-and-decrypting[Methods for encrypting and
decrypting]
* link:#decryptMessageWithPassphrase[decryptMessageWithPassphrase]
* link:#decryptPassphraseWithPassword[decryptPassphraseWithPassword]
* link:#encryptMessageWithPassphrase[encryptMessageWithPassphrase]
* link:#encryptPassphraseWithPassword[encryptPassphraseWithPassword]
* link:#methods-for-hashing[Methods for hashing]
* link:#hash[hash]
* link:#methods-for-managing-keys[Methods for managing keys]
* link:#getAddressAndPublicKeyFromPassphrase[getAddressAndPublicKeyFromPassphrase]
* link:#getAddressFromPassphrase[getAddressFromPassphrase]
* link:#getKeys[getKeys]
* link:#getPrivateAndPublicKeyFromPassphrase[getPrivateAndPublicKeyFromPassphrase]
* link:#printSignedMessage[printSignedMessage]
* link:#methods-for-signing-and-verifying[Methods for signing and
verifying]
* link:#printSignedMessage[printSignedMessage]
* link:#signAndPrintMessage[signAndPrintMessage]
* link:#signMessageWithPassphrase[signMessageWithPassphrase]
* link:#signMessageWithTwoPassphrases[signMessageWithTwoPassphrases]
* link:#verifyMessageWithPublicKey[verifyMessageWithPublicKey]
* link:#verifyMessageWithTwoPublicKeys[verifyMessageWithTwoPublicKeys]

[[installation]]
Installation
~~~~~~~~~~~~

Add Lisk Client as a dependency of your project:

[source,bash]
----
npm install --save @liskhq/lisk-cryptography
----

[[upgrade]]
Upgrade
~~~~~~~

[source,bash]
----
npm update --save @liskhq/lisk-cryptography
----

[[usage]]
Usage
~~~~~

The `lisk-cryptography` package can be used on server-side as well as
client-side code.

In case `lisk-cryptography` is used server-side, you may want to speed
up the application by using the
https://github.com/sodium-friends/sodium-native[sodium-native] library.

To do this, expose `NACL_FAST=enable` as environment variable:

[source,bash]
----
export NACL_FAST=enable
----

To switch back to the default library
https://github.com/dchest/tweetnacl-js[TweetNaCl.js], which is slower
but can also be executed on client-side, set it to `disable`:

[source,bash]
----
export NACL_FAST=disable
----

... or unset it completely:

[source,bash]
----
unset NACL_FAST
----

[[constants]]
Constants
~~~~~~~~~

Cryptography-specific constants are available via the `cryptography`
key:

[[usage-1]]
Usage
^^^^^

[source,js]
----
import * as cryptography from '@liskhq/lisk-cryptography';

cryptography.constants.SIGNED_MESSAGE_PREFIX; // Prefix for signed messages
----

[[methods-for-converting-between-formats]]
Methods for converting between formats
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Methods for converting between different formats.

[[buffertohex]]
bufferToHex
^^^^^^^^^^^

Converts a buffer or byte array to a hex string.

[[syntax]]
Syntax
++++++

[source,js]
----
bufferToHex(buffer)
----

[[parameters]]
Parameters
++++++++++

`buffer`: The buffer to convert into hex string format.

[[return-value]]
Return value
++++++++++++

`string`: The hex string representation of the buffer.

[[examples]]
Examples
++++++++

[source,js]
----
import * as cryptography from '@liskhq/lisk-cryptography';

const buffer = Buffer.from([0xab, 0xcd, 0x12, 0x34]);
cryptography.bufferToHex(buffer); // 'abcd1234'
----

[[getaddressfrompublickey]]
getAddressFromPublicKey
^^^^^^^^^^^^^^^^^^^^^^^

Converts a public key into a Lisk address.

[[syntax-1]]
Syntax
++++++

[source,js]
----
getAddressFromPublicKey(publicKey)
----

[[parameters-1]]
Parameters
++++++++++

`publicKey`: The public key (as a buffer or hex string) to convert.

[[return-value-1]]
Return value
++++++++++++

`string`: The Lisk address for the public key.

[[examples-1]]
Examples
++++++++

[source,js]
----
const publicKey = '968ba2fa993ea9dc27ed740da0daf49eddd740dbd7cb1cb4fc5db3a20baf341b';
cryptography.getAddressFromPublicKey(publicKey); // '12668885769632475474L'
----

[[hextobuffer]]
hexToBuffer
^^^^^^^^^^^

Converts a hex string to a buffer.

[[syntax-2]]
Syntax
++++++

[source,js]
----
hexToBuffer(hexString)
----

[[parameters-2]]
Parameters
++++++++++

`hexString`: The string to convert to a buffer.

[[return-value-2]]
Return value
++++++++++++

`buffer`: The created buffer.

[[examples-2]]
Examples
++++++++

[source,js]
----
const hex = 'abcd1234';
cryptography.hexToBuffer(hex); // <Buffer ab cd 12 34>
----

[[parseencryptedpassphrase]]
parseEncryptedPassphrase
^^^^^^^^^^^^^^^^^^^^^^^^

Parses an encrypted passphrase string as an object.

[[syntax-3]]
Syntax
++++++

[source,js]
----
parseEncryptedPassphrase(encryptedPassphrase)
----

[[parameters-3]]
Parameters
++++++++++

`encryptedPassphrase`: The stringified encrypted passphrase to parse.

[[return-value-3]]
Return value
++++++++++++

`object`: The parsed encrypted passphrase.

[[examples-3]]
Examples
++++++++

[source,js]
----
const encryptedPassphrase = 'iterations=1000000&salt=bce40d3176e31998ec435ffc2993b280&cipherText=99bb7eff6755ecfe1dfa0368328c2d10589d7b85a23f75043497d7bdf7f14fb84e8caee1f9bc4b9543ba320e7f10801b0ff2065427d55c3139cf15e3b626b54f73b72a5b993323a6d60ec4aa407472ae&iv=51bcc76bbd0ab97b2292e305&tag=12e8fcfe7ad735fa9957baa48442e205&version=1';
cryptography.parseEncryptedPassphrase(encryptedPassphrase);
/* {
    iterations: 1000000,
    salt: 'bce40d3176e31998ec435ffc2993b280',
    cipherText: '99bb7eff6755ecfe1dfa0368328c2d10589d7b85a23f75043497d7bdf7f14fb84e8caee1f9bc4b9543ba320e7f10801b0ff2065427d55c3139cf15e3b626b54f73b72a5b993323a6d60ec4aa407472ae',
    iv: '51bcc76bbd0ab97b2292e305',
    tag: '12e8fcfe7ad735fa9957baa48442e205',
    version: '1',
} */
----

[[stringifyencryptedpassphrase]]
stringifyEncryptedPassphrase
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Converts an encrypted passphrase object to a string for convenient
storage.

[[syntax-4]]
Syntax
++++++

[source,js]
----
stringifyEncryptedPassphrase(encryptedPassphrase)
----

[[parameters-4]]
Parameters
++++++++++

`encryptedPassphrase`: The encrypted passphrase object to convert into a
string.

[[return-value-4]]
Return value
++++++++++++

`string`: The encrypted passphrase as a string.

[[examples-4]]
Examples
++++++++

[source,js]
----
const encryptedPassphrase = cryptography.encryptPassphraseWithPassword(
    'robust swift grocery peasant forget share enable convince deputy road keep cheap',
    'some secure password'
);
cryptography.stringifyEncryptedPassphrase(encryptedPassphrase); // 'iterations=1000000&salt=bce40d3176e31998ec435ffc2993b280&cipherText=99bb7eff6755ecfe1dfa0368328c2d10589d7b85a23f75043497d7bdf7f14fb84e8caee1f9bc4b9543ba320e7f10801b0ff2065427d55c3139cf15e3b626b54f73b72a5b993323a6d60ec4aa407472ae&iv=51bcc76bbd0ab97b2292e305&tag=12e8fcfe7ad735fa9957baa48442e205&version=1'
----

[[methods-for-encrypting-and-decrypting]]
Methods for encrypting and decrypting
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[[decryptmessagewithpassphrase]]
decryptMessageWithPassphrase
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Decrypts a message that has been encrypted for a given public key using
the corresponding passphrase.

[[syntax-5]]
Syntax
++++++

[source,js]
----
decryptMessageWithPassphrase(encryptedMessage, nonce, passphrase, senderPublicKey)
----

[[parameters-5]]
Parameters
++++++++++

`encryptedMessage`: The hex string representation of the encrypted
message.

`nonce`: The hex string representation of the nonce used during
encryption.

`passphrase`: The passphrase to be used in decryption.

`senderPublicKey`: The public key of the message sender (used to ensure
the message was signed by the correct person).

[[return-value-5]]
Return value
++++++++++++

`string`: The decrypted message.

[[examples-5]]
Examples
++++++++

[source,js]
----
const decryptedMessage = cryptography.decryptMessageWithPassphrase(
    '7bef28e1ddb34902d2e006a36062805e597924c9885c142444bafb',
    '5c29c9df3f041529a5f9ba07c444a86cbafbfd21413ec3a7',
    'robust swift grocery peasant forget share enable convince deputy road keep cheap',
    '9d3058175acab969f41ad9b86f7a2926c74258670fe56b37c429c01fca9f2f0f'
); // 'Hello Lisk!'
----

[[decryptpassphrasewithpassword]]
decryptPassphraseWithPassword
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Decrypts a passphrase that has been encrypted using a password.

[[syntax-6]]
Syntax
++++++

[source,js]
----
decryptPassphraseWithPassword(encryptedPassphraseObject, password)
----

[[parameters-6]]
Parameters
++++++++++

`encryptedPassphraseObject`: The output of
`encryptPassphraseWithPassword`. Contains `iterations`, `cipherText`,
`iv`, `salt`, `tag`, and `version`.

`password`: The password to be used in decryption.

[[return-value-6]]
Return value
++++++++++++

`string`: The decrypted passphrase.

[[examples-6]]
Examples
++++++++

[source,js]
----
const encryptedPassphrase = {
    iterations: 1000000,
    salt: 'bce40d3176e31998ec435ffc2993b280',
    cipherText: '99bb7eff6755ecfe1dfa0368328c2d10589d7b85a23f75043497d7bdf7f14fb84e8caee1f9bc4b9543ba320e7f10801b0ff2065427d55c3139cf15e3b626b54f73b72a5b993323a6d60ec4aa407472ae',
    iv: '51bcc76bbd0ab97b2292e305',
    tag: '12e8fcfe7ad735fa9957baa48442e205',
    version: '1',
};
const decryptedPassphrase = cryptography.decryptPassphraseWithPassword(
    encryptedPassphrase,
    'some secure password'
); // 'robust swift grocery peasant forget share enable convince deputy road keep cheap'
----

[[encryptmessagewithpassphrase]]
encryptMessageWithPassphrase
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Encrypts a message under a recipient’s public key, using a passphrase to
create a signature.

[[syntax-7]]
Syntax
++++++

[source,js]
----
encryptMessageWithPassphrase(message, passphrase, recipientPublicKey)
----

[[parameters-7]]
Parameters
++++++++++

`message`: The plaintext message to encrypt.

`passphrase`: The passphrase used to sign the encryption and ensure
message integrity.

`recipientPublicKey`: The public key to be used in encryption.

[[return-value-7]]
Return value
++++++++++++

`object`: The result of encryption. Contains `nonce` and
`encryptedMessage`, both in hex string format.

[[examples-7]]
Examples
++++++++

[source,js]
----
const encryptedMessage = cryptography.encryptMessageWithPassphrase(
    'Hello Lisk!',
    'robust swift grocery peasant forget share enable convince deputy road keep cheap',
    '9d3058175acab969f41ad9b86f7a2926c74258670fe56b37c429c01fca9f2f0f'
);
/* {
    encryptedMessage: '7bef28e1ddb34902d2e006a36062805e597924c9885c142444bafb',
    nonce: '5c29c9df3f041529a5f9ba07c444a86cbafbfd21413ec3a7',
} */
----

[[encryptpassphrasewithpassword]]
encryptPassphraseWithPassword
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Encrypts a passphrase under a password for secure storage.

[[syntax-8]]
Syntax
++++++

[source,js]
----
encryptPassphraseWithPassword(passphrase, password, [iterations])
----

[[parameters-8]]
Parameters
++++++++++

`passphrase`: The passphrase to encrypt.

`password`: The password to be used in encryption.

`iterations`: The number of iterations to use when deriving a key from
the password using PBKDF2. (Default if not provided is 1,000,000.)

[[return-value-8]]
Return value
++++++++++++

`object`: The result of encryption. Contains `iterations`, `cipherText`,
`iv`, `salt`, `tag` and `version`.

[[examples-8]]
Examples
++++++++

[source,js]
----
const encryptedPassphrase = cryptography.encryptPassphraseWithPassword(
    'robust swift grocery peasant forget share enable convince deputy road keep cheap',
    'some secure password',
);
/* {
    iterations: 1000000,
    salt: 'bce40d3176e31998ec435ffc2993b280',
    cipherText: '99bb7eff6755ecfe1dfa0368328c2d10589d7b85a23f75043497d7bdf7f14fb84e8caee1f9bc4b9543ba320e7f10801b0ff2065427d55c3139cf15e3b626b54f73b72a5b993323a6d60ec4aa407472ae',
    iv: '51bcc76bbd0ab97b2292e305',
    tag: '12e8fcfe7ad735fa9957baa48442e205',
    version: '1',
} */
----

[[methods-for-hashing]]
Methods for hashing
~~~~~~~~~~~~~~~~~~~

[[hash]]
hash
^^^^

Hashes an input using the SHA256 algorithm.

[[syntax-9]]
Syntax
++++++

[source,js]
----
hash(data, [format])
----

[[parameters-9]]
Parameters
++++++++++

`data`: The data to hash provided as a buffer, or a string.

`format`: The format of the input data if provided as a string. Must be
one of `hex` or `utf8`.

[[return-value-9]]
Return value
++++++++++++

`buffer`: The result of hashing.

[[examples-9]]
Examples
++++++++

[source,js]
----
cryptography.hash(Buffer.from([0xab, 0xcd, 0x12, 0x34])); // <Buffer 77 79 07 d5 4b 6a 45 02 bd 65 4c b4 ae 81 c5 f7 27 01 3b 5e 3b 93 cd 8b 53 d7 21 34 42 69 d3 b0>
cryptography.hash('abcd1234', 'hex'); // <Buffer 77 79 07 d5 4b 6a 45 02 bd 65 4c b4 ae 81 c5 f7 27 01 3b 5e 3b 93 cd 8b 53 d7 21 34 42 69 d3 b0>
cryptography.hash('abcd1234', 'utf8'); // <Buffer e9 ce e7 1a b9 32 fd e8 63 33 8d 08 be 4d e9 df e3 9e a0 49 bd af b3 42 ce 65 9e c5 45 0b 69 ae>
----

[[methods-for-managing-keys]]
Methods for managing keys
~~~~~~~~~~~~~~~~~~~~~~~~~

[[getaddressandpublickeyfrompassphrase]]
getAddressAndPublicKeyFromPassphrase
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns an object containing the address and public key for a provided
passphrase.

[[syntax-10]]
Syntax
++++++

[source,js]
----
getAddressAndPublicKeyFromPassphrase(passphrase)
----

[[parameters-10]]
Parameters
++++++++++

`passphrase`: The secret passphrase to process.

[[return-value-10]]
Return value
++++++++++++

`object`: Contains `address` as a `string`, and `publicKey` as a hex
`string`.

[[examples-10]]
Examples
++++++++

[source,js]
----
cryptography.getAddressAndPublicKeyFromPassphrase(
    'robust swift grocery peasant forget share enable convince deputy road keep cheap'
);
/* {
    address: '8273455169423958419L',
    publicKey: '9d3058175acab969f41ad9b86f7a2926c74258670fe56b37c429c01fca9f2f0f',
} */
----

[[getaddressfrompassphrase]]
getAddressFromPassphrase
^^^^^^^^^^^^^^^^^^^^^^^^

Returns the Lisk address for a provided passphrase.

[[syntax-11]]
Syntax
++++++

[source,js]
----
getAddressFromPassphrase(passphrase)
----

[[parameters-11]]
Parameters
++++++++++

`passphrase`: The secret passphrase to process.

[[return-value-11]]
Return value
++++++++++++

`string`: The address associated with the provided passphrase.

[[examples-11]]
Examples
++++++++

[source,js]
----
cryptography.getAddressFromPassphrase(
    'robust swift grocery peasant forget share enable convince deputy road keep cheap'
); //'8273455169423958419L'
----

[[getkeys]]
getKeys
^^^^^^^

An alias for `getPrivateAndPublicKeyFromPassphrase`.

[[getprivateandpublickeybytesfrompassphrase]]
`getPrivateAndPublicKeyBytesFromPassphrase`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns an object containing the private and public keys as
`Uint8Array`s for a provided passphrase.

[[syntax-12]]
Syntax
++++++

[source,js]
----
getPrivateAndPublicKeyBytesFromPassphrase(passphrase)
----

[[parameters-12]]
Parameters
++++++++++

`passphrase`: The secret passphrase to process.

[[return-value-12]]
Return value
++++++++++++

`object`: Contains `privateKey` and `publicKey` as `Uint8Array`s.

[[examples-12]]
Examples
++++++++

[source,js]
----
cryptography.getPrivateAndPublicKeyBytesFromPassphrase(
    'robust swift grocery peasant forget share enable convince deputy road keep cheap'
);
/* {
    privateKey: [Uint8Array],
    publicKey: [Uint8Array],
} */
----

[[getprivateandpublickeyfrompassphrase]]
getPrivateAndPublicKeyFromPassphrase
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns an object containing the private and public keys as hex
`string`s for a provided passphrase.

[[syntax-13]]
Syntax
++++++

[source,js]
----
getPrivateAndPublicKeyFromPassphrase(passphrase)
----

[[parameters-13]]
Parameters
++++++++++

`passphrase`: The secret passphrase to process.

[[return-value-13]]
Return value
++++++++++++

`object`: Contains `privateKey` and `publicKey` as hex `string`s.

[[examples-13]]
Examples
++++++++

[source,js]
----
cryptography.getPrivateAndPublicKeyFromPassphrase(
    'robust swift grocery peasant forget share enable convince deputy road keep cheap'
);
/* {
    privateKey: 'b092a6664e9eed658ff50fe796ee695b9fe5617e311e9e8a34eb340eb5b831549d3058175acab969f41ad9b86f7a2926c74258670fe56b37c429c01fca9f2f0f',
    publicKey: '9d3058175acab969f41ad9b86f7a2926c74258670fe56b37c429c01fca9f2f0f',
} */
----

[[methods-for-signing-and-verifying]]
Methods for signing and verifying
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[[printsignedmessage]]
printSignedMessage
^^^^^^^^^^^^^^^^^^

Outputs a string representation of a signed message object which is
suitable for printing.

[[syntax-14]]
Syntax
++++++

[source,js]
----
printSignedMessage(signedMessageObject)
----

[[parameters-14]]
Parameters
++++++++++

`signedMessageObject`: The result of calling `signMessageWithPassphrase`
or `signMessageWithTwoPassphrases`.

[[return-value-14]]
Return value
++++++++++++

`string`: The string representation of the signed message object.

[[examples-14]]
Examples
++++++++

[source,js]
----
const stringToPrint = cryptography.printSignedMessage({
    message: 'Hello Lisk!',
    publicKey: '9d3058175acab969f41ad9b86f7a2926c74258670fe56b37c429c01fca9f2f0f',
    signature: '125febe625b2d62381ff836c020de0b00297f7d2493fe6404bc6109fd70a55348555b7a66a35ac657d338d7fe329efd203da1602f4c88cc21934605676558401',
});
console.log(stringToPrint);
//-----BEGIN LISK SIGNED MESSAGE-----
//-----MESSAGE-----
//Hello Lisk!
//-----PUBLIC KEY-----
//9d3058175acab969f41ad9b86f7a2926c74258670fe56b37c429c01fca9f2f0f
//-----SIGNATURE-----
//125febe625b2d62381ff836c020de0b00297f7d2493fe6404bc6109fd70a55348555b7a66a35ac657d338d7fe329efd203da1602f4c88cc21934605676558401
//-----END LISK SIGNED MESSAGE-----
----

[[signandprintmessage]]
signAndPrintMessage
^^^^^^^^^^^^^^^^^^^

Signs a message with one or two passphrases and outputs a string
representation which is suitable for printing.

[[syntax-15]]
Syntax
++++++

[source,js]
----
signAndPrintMessage(message, passphrase, [secondPassphrase])
----

[[parameters-15]]
Parameters
++++++++++

`message`: The string message to sign.

`passphrase`: The secret passphrase to use to sign the message.

`secondPassphrase`: Optional second secret passphrase to use to sign the
message.

[[return-value-15]]
Return value
++++++++++++

`string`: The string representation of the signed message object.

[[examples-15]]
Examples
++++++++

[source,js]
----
const stringToPrint = cryptography.signAndPrintMessage('Hello Lisk!',  'robust swift grocery peasant forget share enable convince deputy road keep cheap');
console.log(stringToPrint);
\-----BEGIN LISK SIGNED MESSAGE-----
\-----MESSAGE-----
Hello Lisk!
\-----PUBLIC KEY-----
9d3058175acab969f41ad9b86f7a2926c74258670fe56b37c429c01fca9f2f0f
\-----SIGNATURE-----
125febe625b2d62381ff836c020de0b00297f7d2493fe6404bc6109fd70a55348555b7a66a35ac657d338d7fe329efd203da1602f4c88cc21934605676558401
\-----END LISK SIGNED MESSAGE-----
----

[[signmessagewithpassphrase]]
signMessageWithPassphrase
^^^^^^^^^^^^^^^^^^^^^^^^^

Signs a message with a passphrase.

[[syntax-16]]
Syntax
++++++

[source,js]
----
signMessageWithPassphrase(message, passphrase)
----

[[parameters-16]]
Parameters
++++++++++

`message`: The string message to sign.

`passphrase`: The secret passphrase to use to sign the message.

[[return-value-16]]
Return value
++++++++++++

`object`: Contains `message`, `publicKey` corresponding to the
passphrase and `signature` as a hex `string`.

[[examples-16]]
Examples
++++++++

[source,js]
----
cryptography.signMessageWithPassphrase('Hello Lisk!',  'robust swift grocery peasant forget share enable convince deputy road keep cheap');
/* {
    message: 'Hello Lisk!',
    publicKey: '9d3058175acab969f41ad9b86f7a2926c74258670fe56b37c429c01fca9f2f0f',
    signature: '125febe625b2d62381ff836c020de0b00297f7d2493fe6404bc6109fd70a55348555b7a66a35ac657d338d7fe329efd203da1602f4c88cc21934605676558401',
} */
----

[[signmessagewithtwopassphrases]]
signMessageWithTwoPassphrases
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Signs a message using a secret passphrase and a second secret
passphrase.

[[syntax-17]]
Syntax
++++++

[source,js]
----
signMessageWithTwoPassphrases(message, passphrase, secondPassphrase)
----

[[parameters-17]]
Parameters
++++++++++

`message`: The message to sign as a UTF8-encoded string or a buffer.

`passphrase`: The secret passphrase to be used in signing.

`secondPassphrase`: The second secret passphrase to be used in signing.

[[return-value-17]]
Return value
++++++++++++

`object`: Contains `message` (the original input), `publicKey` (for the
passphrase as a hex `string`), `secondPublicKey` (for the second
passphrase as a hex `string`), `signature` (as a hex `string`) and
`secondSignature` (as a hex `string`).

[[examples-17]]
Examples
++++++++

[source,js]
----
cryptography.signMessageWithTwoPassphrases(
    'Hello Lisk!',
    'robust swift grocery peasant forget share enable convince deputy road keep cheap',
    'weapon van trap again sustain write useless great pottery urge month nominee',
);
/* {
    message: 'Hello Lisk!',
    publicKey: '9d3058175acab969f41ad9b86f7a2926c74258670fe56b37c429c01fca9f2f0f',
    secondPublicKey: '141b16ac8d5bd150f16b1caa08f689057ca4c4434445e56661831f4e671b7c0a',
    signature: '125febe625b2d62381ff836c020de0b00297f7d2493fe6404bc6109fd70a55348555b7a66a35ac657d338d7fe329efd203da1602f4c88cc21934605676558401',
    secondSignature: '97196d262823166ec9ae5145238479effe00204e763d43cc9539cc711277a6652e8266aace3622f9e8a08cd5de08115c06db15fee71a44a98172cfab58f91c01',
 } */
----

[[verifymessagewithpublickey]]
verifyMessageWithPublicKey
^^^^^^^^^^^^^^^^^^^^^^^^^^

Verifies that a signature for a given message matches the provided
public key.

[[syntax-18]]
Syntax
++++++

[source,js]
----
verifyMessageWithPublicKey(signedMessageObject)
----

[[parameters-18]]
Parameters
++++++++++

`signedMessageObject`: The result of calling
`signMessageWithPassphrase`.

[[return-value-18]]
Return value
++++++++++++

`boolean`: Returns `true` if the signature is valid, and `false` if not.

[[examples-18]]
Examples
++++++++

[source,js]
----
cryptography.verifyMessageWithPublicKey({
    message: 'Hello Lisk!',
    publicKey: '9d3058175acab969f41ad9b86f7a2926c74258670fe56b37c429c01fca9f2f0f',
    signature: '125febe625b2d62381ff836c020de0b00297f7d2493fe6404bc6109fd70a55348555b7a66a35ac657d338d7fe329efd203da1602f4c88cc21934605676558401',
}); // true
----

[[verifymessagewithtwopublickeys]]
verifyMessageWithTwoPublicKeys
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Verifies that a signature and second signature for a given message match
the provided public keys.

[[syntax-19]]
Syntax
++++++

[source,js]
----
verifyMessageWithTwoPublicKeys(signedMessageObject)
----

[[parameters-19]]
Parameters
++++++++++

`signedMessageObject`: The result of calling
`signMessageWithTwoPassphrases`.

[[return-value-19]]
Return value
++++++++++++

`boolean`: Returns `true` if the signatures are valid, and `false` if
not.

[[examples-19]]
Examples
++++++++

[source,js]
----
cryptography.verifyMessageWithTwoPublicKeys({
    message: 'Hello Lisk!',
    publicKey: '9d3058175acab969f41ad9b86f7a2926c74258670fe56b37c429c01fca9f2f0f',
    secondPublicKey: '141b16ac8d5bd150f16b1caa08f689057ca4c4434445e56661831f4e671b7c0a',
    signature: '125febe625b2d62381ff836c020de0b00297f7d2493fe6404bc6109fd70a55348555b7a66a35ac657d338d7fe329efd203da1602f4c88cc21934605676558401',
    secondSignature: '97196d262823166ec9ae5145238479effe00204e763d43cc9539cc711277a6652e8266aace3622f9e8a08cd5de08115c06db15fee71a44a98172cfab58f91c01',
}); // true
----
